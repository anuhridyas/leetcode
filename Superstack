import java.util.Stack;

public class SuperStack
{
Stack<Integer> stack =new Stack<>();
Stack<Integer>  tempStack =new Stack<>();

public void insert(int i ){
stack.push(i);
}

public int pop(){
    int val =Integer.MIN_VALUE;
    if(!stack.isEmpty()){
       val= stack.pop();
    }

return val;
}


public void  increment(int raiseBy , int numberofElement){
    moveTOtempStack(raiseBy,numberofElement);

}



private void  moveTOtempStack (int raiseBy ,int numberOfElements){
    while(!stack.isEmpty()){
        tempStack.push(stack.pop());
    }
    while( !tempStack.isEmpty() && numberOfElements >0){

            stack.push(tempStack.pop() + raiseBy);
            numberOfElements--;

    }

    while(!tempStack.isEmpty()){
        stack.push(tempStack.pop());
    }



}




public static void main(String[] args){

    SuperStack superStack =new SuperStack();
    superStack.insert(1);
    superStack.insert(2);
    superStack.insert(3);
    superStack.insert(4);
    superStack.pop();

    superStack.increment(2,2);
    ;
    superStack.pop();


}
}
